1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Для створення серверної частини програмної системи обрано фреймворк ASP.NET Core, який використовує мову програмування C#. Розробка ведеться у середовищі Visual Studio.
Для управління даними використовується реляційна модель даних на базі Microsoft SQL Server, а для адміністрування застосовується SQL Server Management Studio. Інтеграція бази даних у проект здійснюється за допомогою відповідної залежності для Microsoft SQL Server. Серверна частина відповідає за виконання бізнес-логіки, яка включає розрахунок річної оцінки та статистики відвідування учня. Вона також забезпечує REST API інтерфейс, що дозволяє іншим компонентам системи взаємодіяти з додатком. Сервер використовує архітектуру Model-View-Controller (MVC).

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Діаграма розгортання необхідна для візуалізації взаємодії компонентів системи. Вона допомагає програмістам зрозуміти, як компоненти системи будуть взаємодіяти між собою та з зовнішніми пристроями.
Для діаграми розгортання було визначено наступні компоненти:
•	Сервер: реалізує проект і всю бізнес-логіку, включаючи взаємодію з базою даних. Використовується фреймворк ASP.NET Core на мові програмування C#, що дозволяє створювати надійні і масштабовані веб-додатки.
•	Сервер бази даних Microsoft SQL Server: зберігає всі дані системи. Використання SQL Server обумовлене його надійністю, підтримкою транзакцій з ACID-властивостями та можливістю обробки великих обсягів даних.
•	Сервер клієнтської частини: зберігає веб-сторінки та забезпечує їх доставку до користувачів. Клієнтська частина створена з використанням бібліотеки React, яка забезпечує швидку і зручну взаємодію з користувачем через REST API.
•	Персональний комп'ютер користувача: використовується для взаємодії з системою через веб-інтерфейс. Користувачі можуть здійснювати авторизацію, переглядати інформацію та виконувати інші дії через браузер.
•	IoT-пристрій: надає додаткові функціональності для системи, такі як збір та обробка даних з фізичних сенсорів. Це NFC брелок для відмічання відвідуваності у школі, який забезпечує додаткову функціональність системи, дозволяючи учням реєструвати свою присутність шляхом сканування.
•	Мобільний пристрій: забезпечує можливість взаємодії з системою. Мобільний додаток розроблений з використанням мови програмування Kotlin і може бути встановлений на будь-який Android-пристрій, що дозволяє користувачам здійснювати доступ до функціоналу системи з мобільного телефону.
Таким чином, було створено діаграму розгортання, яка відображає фізичне розташування компонентів системи та їх взаємодію.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Посилання на відео: https://youtu.be/CjL8Hcru5WU 
Серверна частина системи відповідає за реалізацію бізнес-логіки, яка включає розрахунок річної оцінки та статистики відвідування учнів. Також вона забезпечує REST API інтерфейс, за допомогою якого інші компоненти системи можуть взаємодіяти з додатком. Сервер побудований за принципом архітектури Model-View-Controller (MVC).
Використання MVC архітектури передбачає поділ на рівні абстракції: модель, яка відповідає за доступ до даних і їх обробку, представлення (view), що забезпечує користувацький інтерфейс, і контролер, який обробляє запити користувачів, викликає необхідні методи моделі та відображає результати у вигляді представлення.
Серверна частина розробляється на основі ASP.NET Core, що дозволяє створювати високопродуктивні та масштабовані веб-додатки. Вона реалізована на мові програмування C# у середовищі Visual Studio. Для взаємодії з базою даних використовується Entity Framework Core, який забезпечує роботу з Microsoft SQL Server. Це дозволяє виконувати як прямі SQL запити, так і використовувати ORM (Object-Relational Mapping) для взаємодії з базою даних.
Такий підхід дозволяє забезпечити дотримання принципів SOLID, зокрема принципу єдиної відповідальності (Single Responsibility Principle), який стверджує, що кожен компонент системи повинен відповідати за певну частину бізнес-логіки і змінюватися лише для реалізації цієї логіки. Завдяки цьому досягається модульність, легкість у підтримці та масштабованість системи.
Серверна частина взаємодіє з базою даних Microsoft SQL Server, яка забезпечує надійне зберігання даних, підтримку транзакцій з ACID-властивостями та можливість обробки великих обсягів даних. Адміністрування бази даних здійснюється за допомогою SQL Server Management Studio, що надає зручний інтерфейс для управління даними.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для аналізу взаємодії користувачів у системі необхідно створити UML-діаграму прецедентів. На цій діаграмі будуть представлені всі користувачі та їхні можливості в системі.
У системі можуть існувати три види користувачів:
1.Учень
•	Може авторизуватися в системі;
•	Переглядати та редагувати особистий кабінет;
•	Переглядати свої оцінки;
•	Відмічати та переглядати свою відвідуваність;
•	Отримувати річну оцінку та статистику відвідувань.
2.Вчитель
•	Може авторизуватися в системі;
•	Переглядати та редагувати особистий кабінет;
•	Переглядати та виставляти оцінки учнів;
•	Переглядати відвідуваність учнів;
•	Реєструвати нових учнів;
•	Отримувати річну оцінку та статистику відвідувань учня.
3.Адміністратор
•	Загалом стежить за сервісом.
•	Може авторизуватися в системі.
•	Реєструвати нових учнів та вчителів.
•	Переглядати та редагувати всі дані про учнів, вчителів, оцінки, класи, розклад канікул, предметів та відміток учнів.
Отже, у ході роботи були створені схеми прецедентів для учнів, вчителів та адміністраторів, які відображають взаємодію користувачів із системою та функціонал, доступний для виконання.

5 ПОБУДОВА ER-ДІАГРАМИ

ER-діаграма призначена для графічного представлення структури бази даних і демонстрації взаємозв'язків між таблицями. Моя ER-діаграма включає сім сутностей.
ER-діаграма включає наступні сутності:
•	Students: Зберігає всю інформацію про учнів, а також пов'язана з сутністю Classes зв’язком "багато до одного";
•	Classes: Зберігає інформацію про назви класів;
•	Teachers: Зберігає всю інформацію про вчителів;
•	Subjects: Зберігає основну інформацію про предмети;
•	ClassRecords: Зберігає записи про оцінки учнів, а також пов'язана з сутностями Students, Subjects, та Teachers зв’язками "багато до одного";
•	Attendances: Зберігає дані про відвідуваність учнями школи, а також пов'язана з сутністю Students зв’язком "багато до одного";
•	Holidays: Зберігає інформацію про канікули.
Таким чином, було створено ER-модель даних, що відображає структуру бази даних системи та взаємозв'язок між сутностями, забезпечуючи чітке розуміння архітектури даних.


6 СПЕЦИФІКАЦІЯ REST

REST – це архітектурний стиль, який використовується для створення розподілених веб-систем. Створимо REST специфікацію для серверної частини програмної системи (див. додаток А). Ця специфікація визначає доступні маршрути та їх призначення, забезпечуючи чітке розуміння того, як система обробляє запити і відповіді.

7 ПОБУДОВА ДІАГРАМИ СТАНІВ

Для розробки діаграми станів були виділені процеси для трьох типів користувачів: вчитель, учень та адміністратор. Кожен тип користувача має свої специфічні процеси та можливості:
Учень:
•	Авторизація;
•	Особистий кабінет;
•	Перегляд журналу з оцінками;
•	Перегляд статистики відвідувань;
•	Перегляд річної оцінки;
•	Перегляд розкладу канікул;
Вчитель:
•	Авторизація;
•	Особистий кабінет;
•	Перегляд журналу з оцінками;
•	Перегляд статистики відвідувань;
•	Перегляд річної оцінки;
•	Перегляд розкладу канікул;
•	Виставлення оцінки;
Адміністратор:
•	Авторизація;
•	Реєстрація учнів та вчителів;
•	Редагування даних класу, предметів, розкладів канікул;
•	Перегляд та редагування усіх даних.
Отже, було розроблено діаграму станів, яка демонструє поведінку системи в різних станах. Це дозволяє чітко зрозуміти, як система реагує на дії користувачів і які стани можуть виникати в процесі роботи.


ВИСНОВКИ

Під час лабораторної роботи я розробив серверну частину програмної системи, реалізував бізнес-логіку, створив базу даних і освоїв використання REST API. Крім того, я створив UML-діаграми розгортання, прецедентів, компонентів і ER-діаграму бази даних, що допомогло чітко відобразити структуру та взаємодію різних елементів системи.

ДОДАТОК А
Специфікація REST
Операції над адміністратором
1.	Контролер: Admin
Метод: POST
Посилання: /api/Admin/login
Опис: Авторизація адміністратора
Операції над відвідуваннями
1.	Контролер: Attendance
Метод: GET
Посилання: /api/Attendance
Опис: Отримання усіх відвідувань
2.	Контролер: Attendance
Метод: GET
Посилання: /api/Attendance/getAttendance/{id}
Опис: Отримання відвідування по ідентифікатору
3.	Контролер: Attendance
Метод: GET
Посилання: /api/Attendance/getStudentAttendances/{studentId}
Опис: Отримання усіх відвідувань учня по ідентифікатору учня
4.	Контролер: Attendance
Метод: GET
Посилання: /api/Attendance/attendanceStatistics/{studentId}/{startYear}
Опис: Отримання статистики відвідувань учня по ідентифікатору учня та початковому року
5.	Контролер: Attendance
Метод: POST
Посилання: /api/Attendance/postAttendance/{nfcId}
Опис: Додавання відвідування за допомогою NFC ідентифікатора учня
6.	Контролер: Attendance
Метод: POST
Посилання: /api/Attendance/markAbsentStudents
Опис: Позначення учнів, які відсутні
7.	Контролер: Attendance
Метод: PUT
Посилання: /api/Attendance/putExitAttendance/{nfcId}
Опис: Оновлення інформації про вихід учня за допомогою NFC ідентифікатора
8.	Контролер: Attendance
Метод: PUT
Посилання: /api/Attendance/putAttendance/{id}
Опис: Оновлення інформації про відвідування за ідентифікатором
9.	Контролер: Attendance
Метод: DELETE
Посилання: /api/Attendance/delAttendance/{id}
Опис: Видалення відвідування за ідентифікатором
Операції над класами
1.	Контролер: Class
Метод: GET
Посилання: /api/Class
Опис: Отримання усіх класів
2.	Контролер: Class
Метод: GET
Посилання: /api/Class/getClass/{id}
Опис: Отримання конкретного класу за його ідентифікатором
3.	Контролер: Class
Метод: POST
Посилання: /api/Class/postClass
Опис: Створення нового класу
4.	Контролер: Class
Метод: PUT
Посилання: /api/Class/putClass/{id}
Опис: Оновлення інформації про клас за його ідентифікатором
5.	Контролер: Class
Метод: DELETE
Посилання: /api/Class/delClass/{id}
Опис: Видалення класу за його ідентифікатором
Операції над записами оцінок
1.	Контролер: ClassRecord
Метод: GET
Посилання: /api/ClassRecord
Опис: Отримання усіх записів про оцінки
2.	Контролер: ClassRecord
Метод: GET
Посилання: /api/ClassRecord/getClassRecord/{id}
Опис: Отримання запису про оцінку за її ідентифікатором
3.	Контролер: ClassRecord
Метод: GET
Посилання: /api/ClassRecord/getFilteredClassRecords
Опис: Фільтрація та пошук записів про оцінки
4.	Контролер: ClassRecord
Метод: GET
Посилання: /api/ClassRecord/annualAverageGrade
Опис: Отримання річної оцінки
5.	Контролер: ClassRecord
Метод: POST
Посилання: /api/ClassRecord/postClassRecord
Опис: Додавання нового запису про оцінку
6.	Контролер: ClassRecord
Метод: PUT
Посилання: /api/ClassRecord/putClassRecord/{id}
Опис: Оновлення запису про оцінку за її ідентифікатором
7.	Контролер: ClassRecord
Метод: DELETE
Посилання: /api/ClassRecord/delClassRecord/{id}
Опис: Видалення запису про оцінку за її ідентифікатором
Операції над розкладами канікул
1.	Контролер: Holiday
Метод: GET
Посилання: /api/Holiday
Опис: Отримання усіх розкладів канікул
2.	Контролер: Holiday
Метод: GET
Посилання: /api/Holiday/getHoliday/{id}
Опис: Отримання розкладу канікул за його ідентифікатором
3.	Контролер: Holiday
Метод: POST
Посилання: /api/Holiday/postHoliday
Опис: Додавання розкладу канікул
4.	Контролер: Holiday
Метод: PUT
Посилання: /api/Holiday/putHoliday/{id}
Опис: Оновлення інформації про канікули за його ідентифікатором
5.	Контролер: Holiday
Метод: DELETE
Посилання: /api/Holiday/delHoliday/{id}
Опис: Видалення розкладу канікул за його ідентифікатором
Операції над учнями
1.	Контролер: Student
Метод: GET
Посилання: /api/Student
Опис: Отримання усіх учнів
2.	Контролер: Student
Метод: GET
Посилання: /api/Student/getStudentById/{id}
Опис: Отримання учня за його ідентифікатором
3.	Контролер: Student
Метод: GET
Посилання: /api/Student/getStudent
Опис: Отримання учня за його токеном
4.	Контролер: Student
Метод: GET
Посилання: /api/Student/getFilteredStudents
Опис: Фільтрація учнів
5.	Контролер: Student
Метод: GET
Посилання: /api/Student/getSearchStudents
Опис: Пошук учнів
6.	Контролер: Student
Метод: POST
Посилання: /api/Student/postStudent
Опис: Додавання нового учня
7.	Контролер: Student
Метод: POST
Посилання: /api/Student/authorizeStudent
Опис: Авторизація учня
8.	Контролер: Student
Метод: PUT
Посилання: /api/Student/putStudent/{id}
Опис: Оновлення інформації про учня за його ідентифікатором
9.	Контролер: Student
Метод: PUT
Посилання: /api/Student/editStudent
Опис: Редагування учнем інформації про нього
10.	Контролер: Student
Метод: DELETE
Посилання: /api/Student/delStudent/{id}
Опис: Видалення учня за його ідентифікатором
Операції над предметами
1.	Контролер: Subject
Метод: GET
Посилання: /api/Subject
Опис: Отримання усіх предметів
2.	Контролер: Subject
Метод: GET
Посилання: /api/Subject/getSubject/{id}
Опис: Отримання предмета за його ідентифікатором
3.	Контролер: Subject
Метод: POST
Посилання: /api/Subject/postSubject
Опис: Додавання нового предмета
4.	Контролер: Subject
Метод: PUT
Посилання: /api/Subject/putSubject/{id}
Опис: Оновлення інформації про предмет за його ідентифікатором
5.	Контролер: Subject
Метод: DELETE
Посилання: /api/Subject/delSubject/{id}
Опис: Видалення предмета за його ідентифікатором
Операції над вчителями
1.	Контролер: Teacher
Метод: GET
Посилання: /api/Teacher
Опис: Отримання усіх вчителів
2.	Контролер: Teacher
Метод: GET
Посилання: /api/Teacher/getTeacherById/{id}
Опис: Отримання вчителя за його ідентифікатором
3.	Контролер: Teacher
Метод: GET
Посилання: /api/Teacher/getTeacher
Опис: Отримання вчителя за його токеном
4.	Контролер: Teacher
Метод: POST
Посилання: /api/Teacher/postTeacher
Опис: Додавання нового вчителя
5.	Контролер: Teacher
Метод: POST
Посилання: /api/Teacher/authorizeTeacher
Опис: Авторизація вчителя
6.	Контролер: Teacher
Метод: PUT
Посилання: /api/Teacher/putTeacher/{id}
Опис: Оновлення інформації про вчителя за його ідентифікатором
7.	Контролер: Teacher
Метод: PUT
Посилання: /api/Teacher/editTeacher
Опис: Редагування інформації про вчителя
8.	Контролер: Teacher
Метод: DELETE
Посилання: /api/Teacher/delTeacher/{id}
Опис: Видалення вчителя за його ідентифікатором