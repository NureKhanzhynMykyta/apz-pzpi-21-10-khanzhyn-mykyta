1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Клієнтська частина була розроблена за допомогою модульної архітектури, що полягає в розділенні системи на незалежні модулі, кожен з яких відповідає за певну функціональність. Використання модульної архітектури забезпечує зручність в обслуговуванні та розширюваності додатку, дозволяючи легко оновлювати окремі компоненти без порушення роботи всієї системи. Для розробки клієнтської частини обрано бібліотеку React, яка дозволяє створювати динамічні та інтерактивні односторінкові додатки (SPA). Розробка ведеться у середовищі PyCharm, що забезпечує зручність у написанні, тестуванні та налагодженні коду.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для аналізу взаємодії користувачів у системі необхідно створити UML-діаграму прецедентів. На цій діаграмі будуть представлені всі користувачі та їхні можливості в системі.
У системі можуть існувати три види користувачів:
1.Учень
•	Може авторизуватися в системі;
•	Переглядати та редагувати особистий кабінет;
•	Переглядати свої оцінки;
•	Відмічати та переглядати свою відвідуваність;
•	Отримувати річну оцінку та статистику відвідувань.
2.Вчитель
•	Може авторизуватися в системі;
•	Переглядати та редагувати особистий кабінет;
•	Переглядати та виставляти оцінки учнів;
•	Переглядати відвідуваність учнів;
•	Реєструвати нових учнів;
•	Отримувати річну оцінку та статистику відвідувань учня.
3.Адміністратор
•	Загалом стежить за сервісом.
•	Може авторизуватися в системі.
•	Реєструвати нових учнів та вчителів.
•	Переглядати та редагувати всі дані про учнів, вчителів, оцінки, класи, розклад канікул, предметів та відміток учнів.
Отже, у ході роботи були створені схеми прецедентів для учнів, вчителів та адміністраторів, які відображають взаємодію користувачів із системою та функціонал, доступний для виконання.

3 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

Посилання на відео https://youtu.be/PjlNN8tzCeI
Для розробки клієнтської частини було застосовано підхід Component-Based Development, який передбачає створення незалежних компонентів, що можуть повторно використовуватися на різних сторінках додатку. Цей підхід спрощує процес розробки, дозволяючи швидко виправляти помилки та легко розуміти структуру системи. Завдяки модульності забезпечується дотримання принципу підстановки Лісков, що дозволяє замінювати компоненти без порушення роботи додатку.
Деталі архітектури:
App:
Компонент App.js є основою всього додатку, визначаючи маршрутизацію та загальну структуру додатку. Він використовує React Router для створення маршрутизації, що дозволяє навігацію між різними сторінками додатку, такими як сторінки для студентів, вчителів та адміністраторів.
Pages:
Компоненти сторінок (LoginPage.js, StudentPage.js, TeacherPage.js, AdminPage.js) відповідають за відображення основних розділів додатку. Кожна сторінка містить компоненти, специфічні для відповідної ролі користувача, такі як перегляд та редагування особистого кабінету, перегляд оцінок та відвідуваності.
Components:
Компоненти використовуються для реалізації специфічної функціональності на сторінках. Наприклад, LoginForm.js відповідає за відображення форми входу та обробку введених даних користувача, тоді як StudentAttendance.js відповідає за відображення даних про відвідуваність студента. Ці компоненти забезпечують модульність та повторне використання коду.
Services:
Сервіси реалізують логіку взаємодії з сервером. Вони відправляють HTTP-запити до серверної частини, отримують дані та повертають їх у компоненти. Наприклад, studentService.js включає методи для отримання, додавання, редагування та видалення даних студентів. Це дозволяє компонентам залишатися чистими та зосереджуватися на відображенні даних та взаємодії з користувачем.

4 ПОБУДОВА ДІАГРАМИ СТАНІВ

Для розробки діаграми станів були виділені процеси для трьох типів користувачів: вчитель, учень та адміністратор. Кожен тип користувача має свої специфічні процеси та можливості:
Учень:
•	Авторизація;
•	Особистий кабінет;
•	Перегляд журналу з оцінками;
•	Перегляд статистики відвідувань;
•	Перегляд річної оцінки;
•	Перегляд розкладу канікул;
Вчитель:
•	Авторизація;
•	Особистий кабінет;
•	Перегляд журналу з оцінками;
•	Перегляд статистики відвідувань;
•	Перегляд річної оцінки;
•	Перегляд розкладу канікул;
•	Виставлення оцінки;
Адміністратор:
•	Авторизація;
•	Реєстрація учнів та вчителів;
•	Редагування даних класу, предметів, розкладів канікул;
•	Перегляд та редагування усіх даних.
Отже, було розроблено діаграму станів, яка демонструє поведінку системи в різних станах. Це дозволяє чітко зрозуміти, як система реагує на дії користувачів і які стани можуть виникати в процесі роботи.

5 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

UML-діаграма пакетів використовується для візуалізації різних компонентів системи та їхніх взаємозв'язків. Вона дозволяє організувати проект, розділивши його на логічні блоки або пакети, які відповідають різним функціональним частинам системи. Це допомагає програмістам зрозуміти структуру проекту, взаємодію між компонентами та покращити навігацію у коді.
Основні пакети та компоненти проекту:
App:
Головний пакет, який містить основні компоненти додатку.
Pages:
Пакет, що містить сторінки додатку.
•	LoginPage.js: Сторінка для авторизації користувачів.
•	StudentPage.js: Сторінка для учнів, що надає доступ до функцій, таких як перегляд оцінок, відвідуваності тощо.
•	TeacherPage.js: Сторінка для вчителів, де вони можуть управляти оцінками та відвідуваністю учнів.
•	AdminPage.js: Сторінка для адміністраторів з доступом до управління користувачами, класами та іншими даними.
Services:
Пакет, який містить сервіси для взаємодії з API серверної частини.
•	authService.js: Сервіс для авторизації користувачів.
•	teacherService.js: Сервіс для роботи з даними вчителів.
•	classService.js: Сервіс для роботи з класами.
•	subjectService.js: Сервіс для роботи з предметами.
•	classRecordService.js: Сервіс для роботи з записами про оцінки.
•	attendanceService.js: Сервіс для роботи з відвідуваністю.
•	holidayService.js: Сервіс для роботи з канікулами.
•	studentService.js: Сервіс для роботи з даними учнів.
Components:
Пакет багаторазово використовуваних компонентів додатку, організованих за функціональними підпакетами.
Authorization: Компоненти, що відповідають за авторизацію.
•	PrivateRoute.js: Компонент для захисту маршрутів, доступних тільки авторизованим користувачам.
•	LoginForm.js: Форма для авторизації користувачів.
Attendances: Компоненти для роботи з відвідуваністю.
•	AttendanceStatistics.js: Компонент для перегляду статистики відвідуваності.
•	StudentAttendanceTeacher.js: Компонент для вчителів для перегляду та відмітки відвідуваності учня.
•	StudentAttendanceAdmin.js: Компонент для адміністраторів для перегляду та управління відвідуваністю.
•	StudentAttendance.js: Компонент для перегляду відвідуваності учня.
Grades: Компоненти для роботи з оцінками.
•	GradeAssignmentForm.js: Форма для виставлення оцінок.
•	TeacherAnnualAverageGrade.js: Компонент для перегляду річної оцінки учня вчителем.
•	AnnualAverageGrade.js: Компонент для перегляду річної оцінки учня.
•	StudentGrades.js: Компонент для перегляду оцінок учнів.
•	AddGradeForm.js: Форма для додавання нової оцінки.
•	GradeAdminUpdateForm.js: Форма для оновлення оцінок адміністратором.
•	StudentGradeBook.js: Щоденник з оцінками учня.
•	GradeUpdateForm.js: Форма для оновлення оцінок.
Classes: Компоненти для роботи з класами.
•	AddClassForm.js: Форма для додавання нового класу.
•	ClassList.js: Список класів.
•	UpdateClassForm.js: Форма для оновлення даних класу.
Subjects: Компоненти для роботи з предметами.
•	SubjectList.js: Список предметів.
•	AddSubjectForm.js: Форма для додавання нового предмета.
•	UpdateSubjectForm.js: Форма для оновлення даних предмета.
Holidays: Компоненти для роботи з розкладом канікул.
•	AddHolidayForm.js: Форма для додавання нових канікул.
•	UpdateHolidayForm.js: Форма для оновлення даних канікул.
•	HolidaySchedule.js: Компонент для перегляду розкладу канікул.
Students: Компоненти для роботи з учнями.
•	AddStudentForm.js: Форма для додавання нового учня.
•	EditStudentForm.js: Форма редагування даних учнів.
•	StudentList.js: Список учнів.
•	ClassmatesList.js: Список однокласників.
•	UpdateStudentForm.js: Форма для оновлення даних учня.
Teachers: Компоненти для роботи з вчителями.
•	TeacherList.js: Список вчителів.
•	AddTeacherForm.js: Форма для додавання нового вчителя.
•	EditTeacherForm.js: Форма редагування даних вчителів.
•	UpdateTeacherForm.js: Форма для оновлення даних вчителя.
Таким чином, було створено діаграму пакетів, яка показує взаємодію між різними компонентами та модулями системи, забезпечуючи чітке розуміння структури проекту та спрощуючи навігацію в коді.

6 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для надання уявлення про склад програмних компонентів, з яких складається система, було створено UML-діаграму компонентів. Ця діаграма дозволяє програмістам зрозуміти, як саме виконуються завдання системи та взаємодії між її компонентами.
Основним файлом, який містить розмітку і відповідає за відображення всієї необхідної інформації користувачеві, є index.html. Застосунок був розроблений відповідно до концепції односторінкових додатків (SPA), де за допомогою скриптів змінюється вміст одного файлу розмітки (index.html), замість створення окремих файлів для кожної логічної сторінки сайту.
Файл index.js відповідає за рендеринг основного компонента App у кореневий елемент HTML-сторінки. Компонент App.js управляє маршрутизацією додатку, використовуючи бібліотеку React Router, що дозволяє визначити, який з React-компонентів слід відобразити на основі поточної URL-адреси.
Основні сторінки додатку, такі як LoginPage, StudentPage, TeacherPage та AdminPage, використовують різні компоненти для реалізації різного функціоналу. Наприклад, LoginForm відповідає за процес авторизації користувачів, а PrivateRoute забезпечує захист маршрутів, доступних лише авторизованим користувачам.
Компоненти, такі як EditStudentForm, StudentAttendance, AttendanceStatistics, ClassmatesList, StudentGrades, AnnualAverageGrade та HolidaySchedule, реалізують різні функціональні можливості для роботи з даними користувачів, відвідуваністю, оцінками тощо.
Для взаємодії з серверною частиною додаток використовує кілька сервісів, таких як studentService, classService, attendanceService та інші. Ці сервіси забезпечують функціонал для виконання HTTP-запитів до API серверної частини за допомогою бібліотеки Axios.
Отже, було створено діаграму компонентів, яка відображає взаємодію різних частин фронтенд-додатку та їхню взаємодію з серверною частиною через REST API. Це допомагає забезпечити чітке розуміння архітектури системи, полегшує підтримку та розвиток коду, а також сприяє покращенню якості та надійності програмного забезпечення.

ВИСНОВКИ

У результаті виконання лабораторної роботи була реалізована клієнтська частина програмної системи. Крім того, були розроблені UML-діаграми прецедентів, компонентів, пакетів та станів, які ілюструють всі компоненти клієнтської частини проекту.